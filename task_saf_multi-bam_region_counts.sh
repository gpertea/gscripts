#!/bin/bash

#SBATCH --job-name=fc_read_count
#SBATCH --output=logs/fc_count_bam_%A_%a.out # Log file for stdout (%A=jobID, %a=taskID)
#SBATCH --error=logs/fc_count_bam_%A_%a.err  # Log file for stderr
#SBATCH --qos=shared-200-2
#SBATCH --nodes=1                        # We need only one node per task
#SBATCH --ntasks=1                       # One task (process) per node
#SBATCH --cpus-per-task=4                # Request CPUs (2 for view, 2 for sort, 2 for fc?)
#SBATCH --mem=16G                        # Request memory (samtools sort needs memory!)
#SBATCH --time=01:00:00                  # Max walltime (adjust per file)


##  submit array job with: sbatch -a 1-$(wc -l<rnums.lst) ./task_fcounts.sh
##  MUST be in the correct working directory
# --- Job Configuration ---
SAF_ANNOTATION="intervals.saf"            # Path to your annotation in SAF format
BED="intervals.bed"
SAMPLE_LIST_FILE="rnums.lst" ## list of bam file prefixes (RNUM)

BAM_DIR="/dcs04/lieber/lcolladotor/BrainSEQ_LIBD001/brainseq_phase2/preprocessed_data/Hippo_RiboZero/HISAT2_out"

BASE_OUTPUT_DIR="fcounts" # Directory to store results from each task

function err_exit {
 echo -e "Error: $1"
 exit 1
}

# --- Tool Settings ---
# Flags to FILTER OUT reads: Unmapped(4), Secondary(256), Supplementary(2048), QCfail(512) = 2820
EXCLUDE_FLAGS=4
# Flags to REQUIRE: Paired(1).
REQUIRE_FLAGS=1
VIEW_THREADS=2
SORT_THREADS=2
FC_THREADS=2 # featureCounts threads for processing
SORT_MEM_PER_THREAD="4G" # Memory per thread for samtools sort

# --- Sanity Checks ---
if [ ! -f "$SAF_ANNOTATION" ]; then err_exit "Error: SAF file not found: $SAF_ANNOTATION";  fi
if ! command -v samtools &> /dev/null; then err_exit "Error: samtools not found."; fi
if ! command -v featureCounts &> /dev/null; then err_exit "Error: featureCounts (subread package) not found."; fi

# --- SLURM Array Task Logic ---
TASK_ID=${SLURM_ARRAY_TASK_ID}
echo "Running SLURM Task $TASK_ID"

## Get the SAMPLE ID (RNUM) for this task, and find RNUM*sorted.bam files for it
RNUM=$(sed -n "${TASK_ID}p" "$SAMPLE_LIST_FILE")

if [ -z "$RNUM" ]; then err_exit "Error: no RNum was found for $TASK_ID (line $TASK_ID of $SAMPLE_LIST_FILE)"; fi

# featureCounts output - contains counts and summary info
FC_OUTPUT="${BASE_OUTPUT_DIR}/${RNUM}.counts.tsv"
# Summary file automatically generated by featureCounts
FC_SUMMARY="${BASE_OUTPUT_DIR}/${RNUM}.counts.tsv.summary"

## find all ${RNUM}_*sorted.bam files - err_exit if none are found

# Use bash array to store matching filenames to handle spaces or special characters
shopt -s nullglob # Important: Ensures the array is empty if no files match
BAM_FILES=(${BAM_DIR}/${RNUM}_*.sorted.bam)
shopt -u nullglob # Turn nullglob off again (optional, good practice)

# Count the number of BAM files found
NUM_BAM_FILES=${#BAM_FILES[@]}

echo "Found $NUM_BAM_FILES BAM file(s) for sample $RNUM in $BAM_DIR"

# Check the number of files found
if [ $NUM_BAM_FILES -eq 0 ]; then
    err_exit "No BAM files found for sample $RNUM in $BAM_DIR matching pattern ${RNUM}_*.sorted.bam"
fi

# Check if final output for this sample already exists
if [ -f "$FC_OUTPUT" ] && [ -f "$FC_SUMMARY" ]; then
    echo "Skipping $RNUM, output files already exist: $FC_OUTPUT"
    exit 0
fi

## BAM files exist, create output directories
mkdir -p "$BASE_OUTPUT_DIR"

if [ $NUM_BAM_FILES -eq 1 ]; then
  # If exactly one BAM file is found, store its name
  BAM_FILE="${BAM_FILES[0]}"
  echo "Running samtools view | samtools sort -n | featureCounts (strandedness -s 2) for $RNUM..."
  samtools view -u -@ "$VIEW_THREADS" -L $BED -f "$REQUIRE_FLAGS" -F "$EXCLUDE_FLAGS" "$BAM_FILE" \
    | samtools sort -O sam -n -@ "$SORT_THREADS" -m "$SORT_MEM_PER_THREAD" - \
    | featureCounts -p -s 2 -T "$FC_THREADS" -F SAF -a "$SAF_ANNOTATION" -o "$FC_OUTPUT"
  if [ $? -ne 0 ]; then
    echo "Error running featureCounts pipeline for $RNUM (featureCounts exit status: $status)."
    # Clean up potentially incomplete output files
    rm -f "$FC_OUTPUT" "$FC_SUMMARY"
  fi
else # If multiple BAM files are found
  TMP_DIR="$MYSCRATCH/FCOUNT/$RNUM" # Define TMP_DIR using RNUM
  # Create the temporary directory, exit if fails
  mkdir -p "$TMP_DIR" || err_exit "Failed to create temporary directory: $TMP_DIR"
  # Array to hold the paths to the temporary BAM files (containing only reads in target regions)
  TEMP_BAM_LIST=()
  ## extracting regions from each BAM file
  for BAM_FILE in "${BAM_FILES[@]}"; do
    # Get the base name of the current BAM file, removing the .sorted.bam suffix
    BASENAME=$(basename "$BAM_FILE" .sorted.bam)
    # Define the output path for the temporary BAM containing reads from the target regions
    BAMTMP="${TMP_DIR}/${BASENAME}.bed_regions.bam"
    # Extract reads overlapping the BED regions into a new BAM file
    samtools view -b -@ "$VIEW_THREADS" -L "$BED" -f "$REQUIRE_FLAGS" -F "$EXCLUDE_FLAGS" -o "$BAMTMP" "$BAM_FILE"
    # Check if samtools view was successful
    if [ $? -ne 0 ]; then err_exit "samtools view failed for $BAM_FILE"; fi
    # Check if the output file was actually created and is not empty
    if [ -s "$BAMTMP" ]; then
        TEMP_BAM_LIST+=("$BAMTMP") # Add the path to the list
    else
        echo "  Warning: No regions found or empty output for $BAM_FILE. Skipping this file for merge."
        rm -f "$BAMTMP"
    fi
  done
  # Check if we have any temporary BAM files to merge
  if [ ${#TEMP_BAM_LIST[@]} -eq 0 ]; then
      err_exit "No reads found in target regions across all input BAM files for $RNUM."
  fi
  # merge the temporary region BAM files, pipe to sort by name (outputting SAM), then pipe to featureCounts
  samtools merge -u --no-PG -@ "$VIEW_THREADS" - "${TEMP_BAM_LIST[@]}" \
      | samtools sort -O sam -n -@ "$SORT_THREADS" -m "$SORT_MEM_PER_THREAD" - \
      | featureCounts -p -s 2 -T "$FC_THREADS" -F SAF -a "$SAF_ANNOTATION" -o "$FC_OUTPUT" 
  # Check the exit status of the pipeline (specifically featureCounts, the last command)
  if [ $? -ne 0 ]; then
    echo "Error running featureCounts pipeline for $RNUM (featureCounts exit status: $status)."
    # Clean up potentially incomplete output files
    rm -f "$FC_OUTPUT" "$FC_SUMMARY"
    exit 1
  fi
  ## finally, clean up temp files
  /bin/rm -rf "$TMP_DIR"
fi

echo "Task $TASK_ID finished."
