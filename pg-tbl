#!/bin/bash
## table/qry backup for postgresql
read -r -d '' USAGE << EOM
Usage:
 pg-tbl [options] table|qryfile
 
 Default (no -i option given): if the first argument is the path to an existing
 file, and the file content will be assumed to be an sql query to be executed; 
 if it is '-' then the query is taken from stdin. Otherwise the argument is 
 taken to be a table name and the content of specified table will be retrieved.

 If -I option is given, the script switches to "table insert" mode, and the
 first argument of the program must be the name of an existing table, in which the
 content of the file given with -i will be inserted.

 Options:
 Table rows insert mode:
  -I tbl_data.txt     table insert mode: insert the content of tbl_data.txt
                      into the specified table; the input data must be tab 
                      delimited, headerless, and with the exact order of columns.
 Table/query output:
  -f col1,col2..      when the script argument is a table name, this option 
                      specifies the columns (fields) to be selected
                      (default: all columns)
  -C                  output is CSV instead of tab delimited
  -H                  include table header (only for -C option)
  -S                  show table columns and dependencies
  -h/-s server        override PGHOST with this server name
  -p port             overrides default port
  -b/-d database      override PGDATABASE
  -U/-u               override PGUSER
 
 Note: this utility relies on the psql program
 and ~/.pgpass must be configured for user authentication.
EOM

trunc=""
server=""
db=""
user=""
pgopts=""
csv=""
dump=""
infile=""
hdr=""
showdeps=""
quiet=""
tcols=""

function errout {
 echo -e "Error: $1"
 exit 1
}

function psqlget {
  qry="COPY ($1) TO STDOUT WITH (format 'text')"
  psql $pgopts -c "$qry"
}

function output_query_result {
  local qry="$1"
  local fout="$2"
  local copyfmt="format 'text'"
  if [[ -n $csv ]]; then
    copyfmt="format 'csv'"
    fout=$fout.csv.gz
    if [[ -n $hdr ]]; then copyfmt="$copyfmt,header true"; fi
  else
    copyfmt="$copyfmt,null ''"
    fout=$fout.tab.gz
  fi
  psql $pgopts -c "COPY ($qry) TO STDOUT WITH ($copyfmt)" | gzip > "$fout"
}

if [[ -z "$1" || "$1" == "--help" || ( -z "$2" && "$1" == "-h" ) ]]; then
   echo "$USAGE"
   exit 1
fi

while getopts "s:b:h:d:p:f:u:U:qHSCDI:" OPT; do
  case $OPT in
  q)
    quiet=1
    ;;
  S)
    showdeps=1
    ;;
  C)
    csv=1
    ;;
  D) 
    dump=1
    ;;
  H) 
    hdr=1
    ;;
  b | d)
    db="$OPTARG"
    pgopts="$pgopts -d $db"
    ;;
  u | U)
    user="$OPTARG"
    pgopts="$pgopts -U $user"
    ;;
  h | s)
    server="$OPTARG"
    pgopts="$pgopts -h $server"
    ;;
  p)
    port="$OPTARG"
    pgopts="$pgopts -p $port"
    ;;
  I)
    infile="$OPTARG"
    if [[ ! -f $infile ]]; then
      errout "File '$infile' not found!"
    fi
    ;;
  f)
    tcols="$OPTARG"
    ;;
  *)
    echo "$USAGE"
    echo "Error: incorrect options provided"
    exit 1
    ;;
   esac
done
#---
shift $((OPTIND-1))
#so now $@ are just the positional arguments
if [[ -z $server ]]; then server=$PGHOST; fi
if [[ -z $db ]]; then db=$PGDATABASE; fi

table_or_file="$1" ## could be more than one?

if [[ -z $table_or_file ]]; then
 errout "database table or query file not specified!"
fi
if [[ -z $quiet ]]; then
 >&2 echo "Using server '$server', database '$db'"
fi

if [[ -f "$table_or_file" ]]; then
  # Execute query from the file
  date=$(date '+%y_%m_%d')
  fout="query_result.$date"
  qry=$(cat "$table_or_file")
  output_query_result "$qry" "$fout"
  exit 0
fi

if [[ "$table_or_file" == "-" ]]; then
  # Read query from stdin
  query=$(cat)
  date=$(date '+%y_%m_%d')
  fout="query_result.$date"
  output_query_result "$query" "$fout"
  exit 0
fi

# checking table/view existence
r=$(psqlget "select exists (select from pg_tables where schemaname='public' AND tablename='$table_or_file')")
##"
r=$(echo $r | tr '[:upper:]' '[:lower:]')
if [[ $r == "f" ]]; then
  # try to check if it's a view?
  r=$(psqlget "select exists (select from pg_views where viewname='$table_or_file')")
  ##"
  r=$(echo $r | tr '[:upper:]' '[:lower:]')
  if [[ $r == "f" ]]; then
    errout "table/view '$table_or_file' does not exist!"
  fi
fi

if [[ -n $showdeps ]]; then
  echo "Table columns:"
  psqlget "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '$table_or_file'"
  echo ""
  echo "Table dependencies:"
  psqlget "with recursive chain as ( \
    select classid, objid, objsubid, conrelid from pg_depend d \
    join pg_constraint c on c.oid = objid \
    where refobjid = '$table_or_file'::regclass and deptype = 'n' \
union all \
    select d.classid, d.objid, d.objsubid, c.conrelid from pg_depend d \
    join pg_constraint c on c.oid = objid \
    join chain on d.refobjid = chain.conrelid and d.deptype = 'n' ) \
select pg_describe_object(classid, objid, objsubid), pg_get_constraintdef(objid) \
from chain" 
  
  exit 0
fi

if [[ -z "$infile" ]]; then # output mode
  ## backup to: table.date.gz
  date=$(date '+%y_%m_%d')
  fout="$table_or_file.$date"
  qry="select * from $table_or_file"    
  if [[ -n $tcols ]]; then
    qry="select $tcols from $table_or_file"
  fi
  output_query_result "$qry" "$fout"
  exit 0
fi
## -- importing given file into table
copyfmt="format 'text'"
if [[ -n $csv ]]; then
  copyfmt="format 'csv'"
  if [[ -n $hdr ]]; then copyfmt="$copyfmt,header true"; fi
else
  copyfmt="$copyfmt,null ''" 
fi

qry="\\copy $table_or_file from stdin with ($copyfmt)"
if [[ $infile =~ \.t?gz$ ]];
  gzip -cd $infile | psql $pgopts -c "$qry"
else
  psql $pgopts -c "$qry" < $infile
fi
